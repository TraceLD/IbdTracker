using System;
using System.Threading;
using System.Threading.Tasks;
using FluentValidation;
using IbdTracker.Core;
using IbdTracker.Core.CommonDtos;
using IbdTracker.Core.Entities;
using MediatR;

namespace IbdTracker.Features.BowelMovements
{
    public class Post
    {
        public record Command(
            string PatientId,
            DateTime DateTime,
            bool ContainedBlood,
            bool ContainedMucus
        ) : IRequest<BowelMovementEventDto>;

        public class CommandValidator : AbstractValidator<Command>
        {
            public CommandValidator()
            {
                RuleFor(c => c.PatientId)
                    .NotEmpty()
                    .MinimumLength(6);

                RuleFor(c => c.DateTime)
                    .NotEmpty()
                    .LessThan(DateTime.UtcNow);

                RuleFor(c => c.ContainedBlood)
                    .NotNull();

                RuleFor(c => c.ContainedMucus)
                    .NotNull();
            }
        }
        
        public class Handler : IRequestHandler<Command, BowelMovementEventDto>
        {
            private readonly IbdSymptomTrackerContext _context;

            public Handler(IbdSymptomTrackerContext context)
            {
                _context = context;
            }

            public async Task<BowelMovementEventDto> Handle(Command request, CancellationToken cancellationToken)
            {
                // convert to EFCore entity - BowelMovementEvent;
                var bme = new BowelMovementEvent
                {
                    PatientId = request.PatientId,
                    DateTime = request.DateTime,
                    ContainedBlood = request.ContainedBlood,
                    ContainedMucus = request.ContainedMucus
                };
                
                // add to DB and save changes;
                await _context.BowelMovementEvents.AddAsync(bme, cancellationToken);
                await _context.SaveChangesAsync(cancellationToken);
                
                // convert to DTO to follow the best practice of not returning entire EFCore
                // entities in JSON body responses;
                //
                // ID is auto-generated by DB on addition and updated by EFCore so
                // that it exists on the bme object;
                return new()
                {
                    BowelMovementEventId = bme.BowelMovementEventId,
                    PatientId = bme.PatientId,
                    DateTime = bme.DateTime,
                    ContainedBlood = bme.ContainedBlood,
                    ContainedMucus = bme.ContainedMucus
                };
            }
        }
    }
}