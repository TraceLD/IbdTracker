using System.Threading;
using System.Threading.Tasks;
using FluentValidation;
using IbdTracker.Core;
using IbdTracker.Core.CommonDtos;
using IbdTracker.Core.Entities;
using MediatR;

namespace IbdTracker.Features.FoodItems
{
    /// <summary>
    /// POSTs (creates) a new food item.
    /// </summary>
    public class Post
    {
        public record Command(
            string Name,
            string? PictureUrl
        ) : IRequest<FoodItemDto>;

        public class CommandValidator : AbstractValidator<Command>
        {
            public CommandValidator()
            {
                RuleFor(c => c.Name)
                    .NotEmpty();

                RuleFor(c => c.PictureUrl)
                    .Matches(
                        @"(https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|www\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9]+\.[^\s]{2,}|www\.[a-zA-Z0-9]+\.[^\s]{2,})")
                    .When(c => c.PictureUrl is not null);
            }
        }
        
        public class Handler : IRequestHandler<Command, FoodItemDto>
        {
            private readonly IbdSymptomTrackerContext _context;

            public Handler(IbdSymptomTrackerContext context)
            {
                _context = context;
            }

            public async Task<FoodItemDto> Handle(Command request, CancellationToken cancellationToken)
            {
                // convert to EFCore entity - FoodItem;
                var fi = new FoodItem(request.Name, request.PictureUrl);

                // add to DB and save changes;
                await _context.FoodItems.AddAsync(fi, cancellationToken);
                await _context.SaveChangesAsync(cancellationToken);
                
                // convert to DTO to follow the best practice of not returning entire EFCore
                // entities in JSON body responses;
                //
                // ID is auto-generated by DB on addition and updated by EFCore so
                // that it exists on the bme object;
                return new()
                {
                    FoodItemId = fi.FoodItemId,
                    Name = fi.Name,
                    PictureUrl = fi.PictureUrl
                };
            }
        }
    }
}